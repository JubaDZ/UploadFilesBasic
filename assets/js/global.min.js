$(document).ready(function() {
$('#select_all').on('change', function () {
	    var files      = $(this).closest('form').find('.checkbox:checkbox');
	    var deletehash = $(this).closest('form').find('.deletehash:checkbox');
		
		/*$('.checkbox:checkbox').prop('checked', false);
		$('.deletehash:checkbox').prop('checked', false);*/
		
		$('#tablefiles tr').removeClass();
		
		
	    IsDeleteHash = (deletehash.length>=1) ? true : false ;

        if($(this).prop('checked')) {
			files.prop('checked', true);
			if(IsDeleteHash)
				deletehash.prop('checked', true);
			$("#button-selection").show();
			$("#button_1").html(deleteLabel + ' ( ' + TotalItems() +' )');
		} else 
		{
			files.prop('checked', false);
			if(IsDeleteHash)
				deletehash.prop('checked', false);
			$("#button-selection").hide(); 
		}
		$('.checkbox').checkbox('update');
		
});


if (!IsClose) {
	$("body").tooltip({ selector: '[rel=tooltip]',trigger : 'hover' });
	$("img").error(function () {$(this).unbind("error").attr("src", _path_ +"/assets/css/images/notfound.png").css('width','100px');});

	copyright();
	
	if (LoadJsCheckbox) 
	{
		$('.checkbox').checkbox();	
		$('.selectall').checkbox();
		$('.settings').checkbox();	
	}
	
	if (true) 
	{
		$('input[maxlength]').maxlength();
	    $('textarea').maxlength({alwaysShow: true});
	    $('input.captcha').maxlength({warningClass: "label label-danger",limitReachedClass: "label label-success"});
	    $('input.colorselector').maxlength({warningClass: "label label-danger",limitReachedClass: "label label-success"});
	}
	
	if($('#topalert').length)
	if(!$('#topalert').is(':empty'))
	{
		var str     =  $('#topalert').html(),
		    list    =  str.split(","),
			Len     =  list.length,
			counter = 0;
			var i = setInterval(function(){
				if(list[counter]!=='')
				$.sticky( '<code>'+list[counter]+'</code> '+LblSuccessDeleted );
				counter++;
				if(counter === Len) {
					clearInterval(i);
					}
				}, 200);
			
				
	}
	
	
	$("body").keydown(function(e) {
  if(e.keyCode == 37) { // left

  if( $('#FileInfosModal').length ) 
	  ShowNextFileModal('previous','FileInfoModal');
  else if( $('#ShowLinks').length ) 
	  ShowNextFileModal('previous','ShowLinks');
  }
  else if(e.keyCode == 39) { // right
  
     if( $('#FileInfosModal').length ) 
	  ShowNextFileModal('next','FileInfoModal');
  else if( $('#ShowLinks').length ) 
	  ShowNextFileModal('next','ShowLinks');
   
  }
});

		
}

if($("#dowloadDiv").length ){
	
	var DownloadHtml = $("#dowloadDiv").html();

	$("#dowloadDiv").html(DownloadWait);
	
	var timer = setInterval(function() {
		$("#time").html(TimeLoading);
    if (TimeLoading == 0) {
		
        $("#dowloadDiv").html(DownloadHtml);
        clearInterval(timer);
    }
	
    TimeLoading--;
	
	} , 1000 );
	
}

$('#login_username').bind('keyup blur',function(){ 
    var self = $(this);
    self.val(self.val().replace(/[^A-Za-z0-9_. ]/g,'') ); 
	});
	
$('#register_username').bind('keyup blur',function(){ 
    var self = $(this);
    self.val(self.val().replace(/[^A-Za-z0-9_.]/g,'') ); 
	});

 $('#div_add_comment').hide();
 
   $('#input_add_comment').on('click', function(event) {
     $('#erase_add_comment').hide();
	 $('#all_comment').hide();
	 $('#page-selection').hide();
	 
	 $('#div_add_comment').show();
	 $('#text_comment').focus();
        
   });

  $('#cancel_comment').on('click', function(event) {
     $('#erase_add_comment').show();
	 $('#page-selection').show();
	 $('#div_add_comment').hide();
     $('#all_comment').show();
   });
   
   $("#text_comment").on('keyup', function(event) {
    var currentString = $("#text_comment").val()
   // $("Your Div").html(currentString.length);
    if (currentString.length <= 256 && currentString.length >= 5 )  {  /*or whatever your number is*/
	    $("#submit_btn_comment").removeAttr('disabled');	
    } else {
		$("#submit_btn_comment").attr('disabled','disabled');	
    }
});
   
   
   
   

});


function ringIt(cssClass) 
	{
		var ringSound = new Audio();
		
		if ( navigator.userAgent.match("Firefox/") ) 
			ringSound.src = "../assets/audio/bell-ringing.ogg";
		else 
			ringSound.src = "../assets/audio/bell-ringing.mp3";
		
			// sound setting saved on localStorage as 0 or 1, by default sound on (null value on localStorage)
			$globalVolume = localStorage.getItem('global-volume');

		if( ($globalVolume == null || $globalVolume == '1' ) ) 
			ringSound.play();	
		$('#'+cssClass).addClass('animated bounce');		
	}
	
			//Function to convert hex format to a rgb color
function rgb2hex(rgb){
 rgb = rgb.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i);
 return (rgb && rgb.length === 4) ? "" +
  ("0" + parseInt(rgb[1],10).toString(16)).slice(-2) +
  ("0" + parseInt(rgb[2],10).toString(16)).slice(-2) +
  ("0" + parseInt(rgb[3],10).toString(16)).slice(-2) : '';
}

function DisablingButton(id,total)
{
 if(id==1)
 {
	 $("#previous").attr('disabled','disabled');	
	 $("#next").removeAttr('disabled');
 } else
	 $("#previous").removeAttr('disabled');
 
if( id==total )
{
	$("#next").attr('disabled','disabled');	
	$("#previous").removeAttr('disabled');

} else
	$("#next").removeAttr('disabled');	

if( total==1 )
{
	$("#next").attr('disabled','disabled');	
	$("#previous").attr('disabled','disabled');	
}

}


function ShowNextFileModal(type,func)
{	
   var id=parseInt($('#FileId').val());
   (type=='next') ? id++ : id--;
   
    if (typeof(FilesTotal)==='undefined') FilesTotal = 1;
	id = (id<1) ? 1 : id ;
	id = (id>FilesTotal) ? FilesTotal : id ;
	
    $('#FileId').val(id);
	if(func=='ShowLinks')
		ShowLinks(id);	
	else if(func=='FileInfoModal')
	    FileInfoModal(id);
	else if(func=='ShowFileInfoModal')
	    ShowFileInfoModal(id);
	
	
	//DisablingButton(id);
}

function isFunction(functionToCheck) {
 var getType = {};
 return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
}

function TotalItems()
{
	var checkedVals = $('.checkbox:checkbox:checked').map(function() {return this.value;}).get();
    return checkedVals.length;	 
}


function TotalItemsInPage()
{
	var checkedVals = $('.checkbox:checkbox').map(function() {return this.value;}).get();
    return checkedVals.length;	 
}
	
function calcItems(id) 
{
    var total = TotalItems(); 
			 
	if (typeof(id)!=='undefined')
	{
		($('#checkbox_' + id).prop("checked")) ? $("#deletehash_"+id).prop("checked", true) : $("#deletehash_"+id).prop("checked", false);
		($('#checkbox_' + id).prop("checked")) ? $('#file_'+id).removeClass().addClass('active') : $('#file_'+id).removeClass();	
	}		
		
		
	
    if (total<=0)
	{
		$("#button-selection").hide(); 
		$("#button_1").html(deleteLabel);
	}			 
	else 
	{
		$("#button-selection").show(); 
		$("#button_1").html(deleteLabel + ' ( ' + total +' )');
	}
				       
}	

  function loadTableHtml(data)
{
	
	if(data.error_msg)
		$("#tbody").html('<tr><td colspan="9"><code>'+data.error_msg+'<code></td></tr>');
	else
		$("#tbody").html(data.success_msg);  
}	

function escapeTags(str) {
    return String(str).replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
}


function redirect(parameter) {
    window.location = './' + parameter;
}


function FileSetPassword()
{
	bootbox.prompt({title: PassLabel,value: $("#File_Password").val(),inputType: 'password',size: 'small',buttons: {confirm: {label: _Yes},cancel: {label: _No}},
    callback: function (result) {
		
		$("#File_Password").val(result);

		(result == '' || result == null) ? $("#SetPassword").html(PassLabel) : $("#SetPassword").html('<code>'+PassLabel+'</code>');
		
		if(result == null)
			$("#File_Password").val('');
						
    }
});
$('#bootbox_password').password();
$('#bootbox_password').maxlength();
}

function CopyLink(ElemId) {
    $("#" + ElemId).focus();
    $("#" + ElemId).select();
    document.execCommand("copy");
	/*$("#" + ElemId).blur();*/
}

function CopyHideElmLink(ElemId) {
	$("#" + ElemId).prop('type', 'text');
	$("#" + ElemId).focus();
    $("#" + ElemId).select();
    document.execCommand("copy");
	$("#" + ElemId).prop('type', 'hidden');	
	/*$("#" + ElemId).blur();*/
}

function SetAnimation(_Modal,_Animation,_ModalSize) {
    $('#_'+_Modal).attr('class', 'modal-dialog  '+_ModalSize+'  ' + _Animation + '  animated');
};


function SetModalAnimation(_Modal,_Entrance,_Exit,_ModalSize ) {
if (typeof(_ModalSize)==='undefined') _ModalSize = '';
$('#'+_Modal).on('show.bs.modal', function (e) {
      SetAnimation(_Modal,_Entrance,_ModalSize);
})
$('#'+_Modal).on('hide.bs.modal', function (e) {
      SetAnimation(_Modal,_Exit,_ModalSize);
	  	  
	/*
        clearTimeout($('#'+_Modal).data('hideInterval'));
        $('#'+_Modal).data('hideInterval', setTimeout(function(){
            $('#'+_Modal).modal('hide');
        }, 3000));
	  
	  */	  
})
}

  function RandomColor() {
    var letters = '0123456789ABCDEF';
    var color = '#';
    for (var i = 0; i < 6; i++ ) {
        color += letters[Math.floor(Math.random() * 16)];
    }
    return color;
  }
 
 
 function getRandomColors(length) {
	var colors = [];
	for (var i = 0; i < length; i++) 
		colors[i]=RandomColor();
	return colors;
}


 function pieChart(ElementID,_labels_,_data_)
 {
	 var arrayLength = _data_.length ,
	     colors      = getRandomColors(arrayLength),
		 ElemId      = ElementID.replace('#', ''),
		 myChart     = null ;
		 
	$(ElementID).remove(); 
	$('#Div'+ElemId).append('<canvas width="400" height="200" id="'+ ElemId +'"><canvas>');  
		 

	 if (typeof(Chart)!=='undefined') 
	 {      
		 if(myChart!=null)
			 /*myChart.removeData();*/
			 myChart.destroy();
	     myChart = new Chart($(ElementID), {type: 'pie',data: {labels: _labels_,datasets: [{data: _data_,backgroundColor: colors,}]}}); 
	 }
 }
 
  function barChart(ElementID,_labels_,_data_,_title_)
 {
 	  var arrayLength = _data_.length ,
	     colors      = getRandomColors(arrayLength),
		 ElemId      = ElementID.replace('#', ''),
		 myChart     = null ;
		 
	$(ElementID).remove(); 
	$('#Div'+ElemId).append('<canvas width="400" height="200" id="'+ ElemId +'"><canvas>');  
		 

	 if (typeof(Chart)!=='undefined') 
	{
		if(myChart!=null)
			 myChart.destroy();
        myChart = new Chart($(ElementID), {type: "bar",data: {labels: _labels_,datasets: [{label: _title_,data: _data_, backgroundColor: colors, borderWidth: 1}]},options: { legend: { display: false } , scales: {yAxes: [{ticks: {beginAtZero:true}}]}}});
	}
 }
 
  function lineChart(ElementID,_labels_,_data_,RefLabel)
 {
	  var arrayLength = _data_.length ,
	     colors      = getRandomColors(arrayLength),
		 color       = getRandomColors(1),
		 ElemId      = ElementID.replace('#', ''),
		 myChart     = null ;
		 
	$(ElementID).remove(); 
	$('#Div'+ElemId).append('<canvas width="400" height="200" id="'+ ElemId +'"><canvas>');  
		 

	 if (typeof(Chart)!=='undefined') 
	{
		if(myChart!=null)
			 myChart.destroy(); 
	    myChart = new Chart($(ElementID), {type: 'line',data: {labels: _labels_,datasets: [{data: _data_,backgroundColor: color, label: RefLabel, borderColor:color,fill: false}]}}); 
	}
 }
 
  function doughnutChart(ElementID,_labels_,_data_)
 {
	  var arrayLength = _data_.length ,
	     colors      = getRandomColors(arrayLength),
		 ElemId      = ElementID.replace('#', ''),
		 myChart     = null ;
		 
	$(ElementID).remove(); 
	$('#Div'+ElemId).append('<canvas width="400" height="200" id="'+ ElemId +'"><canvas>');  
		 

	 if (typeof(Chart)!=='undefined') 
	{
		if(myChart!=null)
			 myChart.destroy();
	    var myChart = new Chart($(ElementID), {type: 'doughnut',data: {labels: _labels_,datasets: [{data: _data_,backgroundColor: colors,}]}}); 
	}		
 }
 
   function countriesChart(ElementID,_labels_,_data_)
 {
	  var arrayLength = _data_.length ,
	     colors      = getRandomColors(arrayLength),
		 ElemId      = ElementID.replace('#', ''),
		 myChart     = null ;
		 

	 if (typeof(Chart)!=='undefined') 
	{
		if(myChart!=null)
			 myChart.destroy();

				 
        

    // Datamaps expect data in format:
    // { "USA": { "fillColor": "#42a844", numberOfWhatever: 75},
    //   "FRA": { "fillColor": "#8dc386", numberOfWhatever: 43 } }
    var dataset = {};
    // We need to colorize every country based on "numberOfWhatever"
    // colors should be uniq for every value.
    // For this purpose we create palette(using min/max series-value)

    var minValue = Math.min.apply(null, _data_),
            maxValue = Math.max.apply(null, _data_);
    // create color palette function
    // color can be whatever you wish
    var paletteScale = d3.scale.linear()
            .domain([minValue,maxValue])
            .range(["#EFEFFF","#02386F"]); // blue color

	
	
	for (var i=0; i<_data_.length; i++)
		dataset[_labels_[i]] = { numberOfThings: _data_[i], fillColor: colors[i] };
	
	convertedData = convertDataToTwoLetterIsoCode(dataset)

    // render map
    var myChart = new Datamap({
        element: document.getElementById(ElemId),
		responsive: true,
        height: 200,
        width: 400,
        projection: 'mercator', // big world map
        // countries don't listed in dataset will be painted with this color
		 fills: {
    defaultFill: "#02386F",
    authorHasTraveledTo: "#fa0fa0"
  },
       
        data: convertedData,
        geographyConfig: {
            borderColor: '#DEDEDE',
            highlightBorderWidth: 2,
            // don't change color on mouse hover
            highlightFillColor: function(geo) {
                return geo['fillColor'] || '#F5F5F5';
            },
            // only change border
            highlightBorderColor: '#B7B7B7',
            // show desired information in tooltip
            popupTemplate: function(geo, data) {
                // don't show tooltip if country don't present in dataset
                if (!data) { return ; }
                // tooltip content
				CountryName = (IsRtL) ? isoToCountryName(convertToIsoCode(geo.id)) : geo.properties.name;
                return ['<div class="hoverinfo">',
                    '<strong>', CountryName , '</strong>',
                    '<br>'+Numberlbl+': <strong>', data.numberOfThings, '</strong>',
                    '</div>'].join('');
            }
        }
    });
		
		
	}

	  window.addEventListener('resize', function () {
        myChart.resize();
    });
 }
 



